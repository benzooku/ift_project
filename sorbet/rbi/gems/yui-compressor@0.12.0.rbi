# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `yui-compressor` gem.
# Please instead update this file by running `bin/tapioca gem yui-compressor`.

# source://yui-compressor//lib/yui/compressor.rb#6
module YUI; end

# source://yui-compressor//lib/yui/compressor.rb#7
class YUI::Compressor
  # @return [Compressor] a new instance of Compressor
  #
  # source://yui-compressor//lib/yui/compressor.rb#24
  def initialize(options = T.unsafe(nil)); end

  # source://yui-compressor//lib/yui/compressor.rb#34
  def command; end

  # Compress a stream or string of code with YUI Compressor. (A stream is
  # any object that responds to +read+ and +close+ like an IO.) If a block
  # is given, you can read the compressed code from the block's argument.
  # Otherwise, +compress+ returns a string of compressed code.
  #
  # ==== Example: Compress CSS
  #   compressor = YUI::CssCompressor.new
  #   compressor.compress(<<-END_CSS)
  #     div.error {
  #       color: red;
  #     }
  #     div.warning {
  #       display: none;
  #     }
  #   END_CSS
  #   # => "div.error{color:red;}div.warning{display:none;}"
  #
  # ==== Example: Compress JavaScript
  #   compressor = YUI::JavaScriptCompressor.new
  #   compressor.compress('(function () { var foo = {}; foo["bar"] = "baz"; })()')
  #   # => "(function(){var foo={};foo.bar=\"baz\"})();"
  #
  # ==== Example: Compress and gzip a file on disk
  #   File.open("my.js", "r") do |source|
  #     Zlib::GzipWriter.open("my.js.gz", "w") do |gzip|
  #       compressor.compress(source) do |compressed|
  #         while buffer = compressed.read(4096)
  #           gzip.write(buffer)
  #         end
  #       end
  #     end
  #   end
  #
  # source://yui-compressor//lib/yui/compressor.rb#85
  def compress(stream_or_string); end

  # Returns the value of attribute options.
  #
  # source://yui-compressor//lib/yui/compressor.rb#14
  def options; end

  private

  # source://yui-compressor//lib/yui/compressor.rb#149
  def command_option_for_charset(charset); end

  # source://yui-compressor//lib/yui/compressor.rb#153
  def command_option_for_line_break(line_break); end

  # source://yui-compressor//lib/yui/compressor.rb#145
  def command_option_for_type; end

  # source://yui-compressor//lib/yui/compressor.rb#113
  def command_options; end

  # source://yui-compressor//lib/yui/compressor.rb#129
  def java_opts; end

  # source://yui-compressor//lib/yui/compressor.rb#133
  def path_to_jar_file; end

  # source://yui-compressor//lib/yui/compressor.rb#125
  def path_to_java; end

  # source://yui-compressor//lib/yui/compressor.rb#137
  def streamify(stream_or_string); end

  class << self
    # @raise [Error]
    #
    # source://yui-compressor//lib/yui/compressor.rb#20
    def compressor_type; end

    # source://yui-compressor//lib/yui/compressor.rb#16
    def default_options; end
  end
end

# source://yui-compressor//lib/yui/compressor.rb#10
class YUI::Compressor::Error < ::StandardError; end

# source://yui-compressor//lib/yui/compressor.rb#11
class YUI::Compressor::OptionError < ::YUI::Compressor::Error; end

# source://yui-compressor//lib/yui/compressor.rb#12
class YUI::Compressor::RuntimeError < ::YUI::Compressor::Error; end

# source://yui-compressor//lib/yui/compressor.rb#8
YUI::Compressor::VERSION = T.let(T.unsafe(nil), String)

# source://yui-compressor//lib/yui/compressor.rb#158
class YUI::CssCompressor < ::YUI::Compressor
  # Creates a new YUI::CssCompressor for minifying CSS code.
  #
  # Options are:
  #
  # <tt>:charset</tt>::    Specifies the character encoding to use. Defaults to
  #                        <tt>"utf-8"</tt>.
  # <tt>:line_break</tt>:: By default, CSS will be compressed onto a single
  #                        line. Use this option to specify the maximum
  #                        number of characters in each line before a newline
  #                        is added. If <tt>:line_break</tt> is 0, a newline
  #                        is added after each CSS rule.
  #
  # @return [CssCompressor] a new instance of CssCompressor
  #
  # source://yui-compressor//lib/yui/compressor.rb#175
  def initialize(options = T.unsafe(nil)); end

  class << self
    # source://yui-compressor//lib/yui/compressor.rb#159
    def compressor_type; end
  end
end

# source://yui-compressor//lib/yui/compressor.rb#180
class YUI::JavaScriptCompressor < ::YUI::Compressor
  # Creates a new YUI::JavaScriptCompressor for minifying JavaScript code.
  #
  # Options are:
  #
  # <tt>:charset</tt>::    Specifies the character encoding to use. Defaults to
  #                        <tt>"utf-8"</tt>.
  # <tt>:line_break</tt>:: By default, JavaScript will be compressed onto a
  #                        single line. Use this option to specify the
  #                        maximum number of characters in each line before a
  #                        newline is added. If <tt>:line_break</tt> is 0, a
  #                        newline is added after each JavaScript statement.
  # <tt>:munge</tt>::      Specifies whether YUI Compressor should shorten local
  #                        variable names when possible. Defaults to +false+.
  # <tt>:optimize</tt>::   Specifies whether YUI Compressor should optimize
  #                        JavaScript object property access and object literal
  #                        declarations to use as few characters as possible.
  #                        Defaults to +true+.
  # <tt>:preserve_semicolons</tt>:: Defaults to +false+. If +true+, YUI
  #                                 Compressor will ensure semicolons exist
  #                                 after each statement to appease tools like
  #                                 JSLint.
  #
  # @return [JavaScriptCompressor] a new instance of JavaScriptCompressor
  #
  # source://yui-compressor//lib/yui/compressor.rb#215
  def initialize(options = T.unsafe(nil)); end

  private

  # source://yui-compressor//lib/yui/compressor.rb#220
  def command_option_for_munge(munge); end

  # source://yui-compressor//lib/yui/compressor.rb#224
  def command_option_for_optimize(optimize); end

  # source://yui-compressor//lib/yui/compressor.rb#228
  def command_option_for_preserve_semicolons(preserve_semicolons); end

  class << self
    # source://yui-compressor//lib/yui/compressor.rb#181
    def compressor_type; end

    # source://yui-compressor//lib/yui/compressor.rb#185
    def default_options; end
  end
end
